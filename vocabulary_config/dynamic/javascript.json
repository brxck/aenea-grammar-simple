{
  "name": "javascript",
  "tags": ["all"],
  "vocabulary": {
    "true": "true",
    "false": "false",

    "op and": " && ",
    "op equals": " === ",
    "op not": " !== ",
    "op or": " || ",

    "await": "await ",
    "async": "async ",

    "try": [
      { "type": "Text", "args": ["try {"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "catch": [
      { "type": "Text", "args": [" catch () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "finally": [
      { "type": "Text", "args": [" finally {"] },
      { "type": "Key", "args": ["enter"] }
    ],

    "do loop": [
      { "type": "Text", "args": ["do {"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "for loop": [
      { "type": "Text", "args": ["for () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "while loop": [
      { "type": "Text", "args": ["while () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "with block": [
      { "type": "Text", "args": ["with () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "break": "break",
    "continue": "continue",
    "yield": "yield",

    "if": "if (",
    "else": " else ",
    "else if": [
      { "type": "Text", "args": [" else if () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "switch": [
      { "type": "Text", "args": ["switch () {"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "case": "case ",

    "import": "import ",
    "export": "export ",
    "from": " from ",

    "open comment": "/* ",
    "close comment": " */",

    "arguments": "arguments",
    "const": "const ",
    "debugger": "debugger",
    "define": "def ",
    "delete": "delete ",
    "enum": "enum",
    "eval": "eval(",
    "extends ": "extends ",
    "function": "function ",
    "instance of": "instanceof ",
    "int": "int ",
    "j query": [
      { "type": "Text", "args": ["$()"] },
      { "type": "Key", "args": ["left"] }
    ],
    "let": "let ",
    "new": "new ",
    "null": "null",
    "object": "Object",
    "reg exp": "RegExp",
    "return": "return ",
    "super": "super(",
    "this": "this",
    "throw": "throw ",
    "typeof": "typeof ",
    "to equal": "toEqual",
    "var": "var ",
    "window": "window",
    "undefined": "undefined",
    "upper JSON": "JSON"
  }
}
