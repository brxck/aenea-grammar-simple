{
  "name": "ruby",
  "tags": ["all"],
  "vocabulary": {
    "attribute reader": "attr_reader :",
    "attribute accessor": "attr_accessor :",

    "begin": [
      { "type": "Text", "args": ["begin"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "comment start": [
      { "type": "Text", "args": ["=begin"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "comment end": [
      { "type": "Text", "args": ["=end"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "op block": [
      { "type": "Text", "args": ["{ || }"] },
      { "type": "Key", "args": ["left:3"] }
    ],
    "block multi": [
      { "type": "Text", "args": ["do ||"] },
      { "type": "Key", "args": ["left"] }
    ],
    "class": "class ",
    "define": "def ",
    "define initialize": "initialize(",
    "else": [
      { "type": "Text", "args": ["else"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "end": "end",
    "exec": "exec ",
    "else if": "elsif ",
    "ensure": [
      { "type": "Text", "args": ["ensure"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "for loop": "for ",
    "if": "if ",
    "include": "include ",
    "lambda": "lambda ",
    "loop": "loop { ",
    "loop multi": [
      { "type": "Text", "args": ["loop do"] },
      { "type": "Key", "args": ["enter"] }
    ],
    "op matches": [
      { "type": "Text", "args": [" =~ //"] },
      { "type": "Key", "args": ["left"] }
    ],
    "module": "module",
    "nil": "nil",
    "not": " ! ",
    "not match": [
      { "type": "Text", "args": [" !~ //"] },
      { "type": "Key", "args": ["left"] }
    ],
    "or equals": " ||= ",
    "protected": [
      { "type": "Text", "args": ["protected"] },
      { "type": "Key", "args": ["enter:2"] }
    ],
    "raise": "raise",
    "rescue": "rescue => e",
    "return": "return",
    "interpol": [
      { "type": "Text", "args": ["#{}"] },
      { "type": "Key", "args": ["left:1"] }
    ],

    "sim": ":",
    "true": "true",
    "false": "false",
    "unless": "unless ",
    "while": "while ",
    "yield": "yield ",

    "gem file": "Gemfile",
    "gem file lock": "Gemfile.lock",
    "gem spec": ".gemspec",

    "is blank": ".blank?",
    "is empty": ".empty?",
    "is nil": ".nil?",
    "to F": ".to_f",
    "to I": ".to_i",
    "to S": ".to_s",
    "to sim": ".to_sym",
    "time dot now": "Time.now",
    "dot first": ".first",
    "dot last": ".last",
    "dot size": ".size",
    "dot count": ".count",

    "log debug": [
      { "type": "Text", "args": ["logger.debug {  }"] },
      { "type": "Key", "args": ["left:2"] }
    ],
    "log error": [
      { "type": "Text", "args": ["logger.error {  }"] },
      { "type": "Key", "args": ["left:2"] }
    ],
    "log info": [
      { "type": "Text", "args": ["logger.info {  }"] },
      { "type": "Key", "args": ["left:2"] }
    ],
    "log warn": [
      { "type": "Text", "args": ["logger.warn {  }"] },
      { "type": "Key", "args": ["left:2"] }
    ],

    "describe": [
      { "type": "Text", "args": ["describe '' do"] },
      { "type": "Key", "args": ["left:4"] }
    ],
    "it should": [
      { "type": "Text", "args": ["it 'should ' do"] },
      { "type": "Key", "args": ["left:4"] }
    ],
    "expect": "expect(",
    "to equal": ".to eql(",

    "params hash": "params[:",

    "R console": "rails console",
    "R server": "rails server",
    "R D B": "rails db:",
    "R local server": "rails server -b 0.0.0.0",
    "bin rails": "bin/rails "
  }
}
