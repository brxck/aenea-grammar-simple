{
    "name": "ruby",
    "tags": ["all"],
    "vocabulary": {
        "and": " && ",
        "and equals": " &&= ",
        "append": " << ",
        "attribute reader": "attr_reader :",
        "attribute accessor": "attr_accessible :",
        "begin": [{"type": "Text", "args": ["begin"]}, {"type": "Key", "args": ["enter"]}],
        "block comment start": [{"type": "Text", "args": ["=begin"]}, {"type": "Key", "args": ["enter"]}],
        "block comment end": [{"type": "Text", "args": ["=end"]}, {"type": "Key", "args": ["enter"]}],
        "block": [{"type": "Text", "args": ["{ || }"]}, {"type": "Key", "args": ["left:3"]}],
        "block multi": [{"type": "Text", "args": ["do ||"]}, {"type": "Key", "args": ["left"]}],
        "class": "class ",
        "define": "def ",
        "define initialize": [{"type": "Text", "args": ["def initialize()"]}, {"type": "Key", "args": ["left"]}],
        "do": [{"type": "Text", "args": ["do ||"]}, {"type": "Key", "args": ["left"]}],
        "else": [{"type": "Text", "args": ["else"]}, {"type": "Key", "args": ["enter"]}],
        "end": "end",
        "exec": "exec ",
        "exit": [{"type": "Text", "args": ["exit"]}, {"type": "Key", "args": ["enter"]}],
        "else if": "elsif ", 
        "ensure": [{"type": "Text", "args": ["ensure"]}, {"type": "Key", "args": ["enter"]}],
        "false": "false",
        "for loop": "for ",
        "hash": [{"type": "Text", "args": ["{  }"]}, {"type": "Key", "args": ["left:2"]}],
        "hash rocket": " => ",
        "hash key": [{"type": "Text", "args": [" => "]}, {"type": "Key", "args": ["left:4"]}],
        "hash key string": [{"type": "Text", "args": ["\"\" => "]}, {"type": "Key", "args": ["left:5"]}],      
        "hash key symbol": [{"type": "Text", "args": [": "]}, {"type": "Key", "args": ["left:2"]}],
        "if": "if ",
        "index": [{"type": "Text", "args": ["[]"]}, {"type": "Key", "args": ["left"]}],
        "instance": "@",
        "include": "include ",
        "lambda": "lambda ",
        "loop": "loop { ",
        "loop multi": [{"type": "Text", "args": ["loop do"]}, {"type": "Key", "args": ["enter"]}],
        "matches": [{"type": "Text", "args": [" =~ //"]}, {"type": "Key", "args": ["left"]}],
        "module": "module",
        "next": "next",
        "nil": "nil",
        "not": " ! ",
        "not equals": " != ",
        "not matches": [{"type": "Text", "args": [" !~ //"]}, {"type": "Key", "args": ["left"]}],
        "or": " || ",
        "or equals": " ||= ",
        "print": "p ",
        "private": [{"type": "Text", "args": ["private"]}, {"type": "Key", "args": ["enter:2"]}],
        "protected": [{"type": "Text", "args": ["protected"]}, {"type": "Key", "args": ["enter:2"]}],
        "raise": "raise",
        "raise exception": [{"type": "Text", "args": ["raise ''"]}, {"type": "Key", "args": ["left"]}],
        "rescue": "rescue => e",
        "require": "require ",
        "return": "return",
        "interpol": [{"type": "Text", "args": ["#{}"]}, {"type": "Key", "args": ["left:1"]}],
        "symbol": ":",
        "true": "true",
        "unless": "unless ",
        "while": "while ",
        "yield": "yield ",

        "gem file": "Gemfile",
        "gem file lock": "Gemfile.lock",
        "gem spec": ".gemspec",

        "is blank": ".blank?",
        "is empty": ".empty?",
        "is nil": ".nil?",
        "to F": ".to_f",
        "to I": ".to_i",
        "to S": ".to_s",
        "to sim": ".to_sym",      
        "time dot now": "Time.now",
        "dot first": ".first",
        "dot last": ".last",
        "dot size": ".size",
        "dot count": ".count",

        "log debug": [{"type": "Text", "args": ["logger.debug {  }"]}, {"type": "Key", "args": ["left:2"]}],
        "log error": [{"type": "Text", "args": ["logger.error {  }"]}, {"type": "Key", "args": ["left:2"]}],
        "log info": [{"type": "Text", "args": ["logger.info {  }"]}, {"type": "Key", "args": ["left:2"]}],
        "log warn": [{"type": "Text", "args": ["logger.warn {  }"]}, {"type": "Key", "args": ["left:2"]}],

        "assert": "assert ",
        "params": [{"type": "Text", "args": ["params[:]"]}, {"type": "Key", "args": ["left"]}],

        "describe": [{"type": "Text", "args": ["describe '' do"]}, {"type": "Key", "args": ["left:4"]}],
        "it should": [{"type": "Text", "args": ["it 'should ' do"]}, {"type": "Key", "args": ["left:4"]}],
        "expect": [{"type": "Text", "args": ["expect()"]}, {"type": "Key", "args": ["left"]}],
        "to equal": [{"type": "Text", "args": [".to eql()"]}, {"type": "Key", "args": ["left"]}],
        "to receive": [{"type": "Text", "args": [".to receive(:)"]}, {"type": "Key", "args": ["left"]}],

        "rails D B migrate": [{"type": "Text", "args": ["bundle exec rake db:migrate"]}, {"type": "Key", "args": ["enter"]}],
        "rails D B migrate redo": [{"type": "Text", "args": ["bundle exec rake db:migrate:redo"]}, {"type": "Key", "args": ["enter"]}],
        "rails D B test prepare": [{"type": "Text", "args": ["bundle exec rake db:test:prepare"]}, {"type": "Key", "args": ["enter"]}],
        "rails routes": [{"type": "Text", "args": ["bundle exec rake routes"]}, {"type": "Key", "args": ["enter"]}],
        "start ruby shell": [{"type": "Text", "args": ["irb"]}, {"type": "Key", "args": ["enter"]}]
    }
}